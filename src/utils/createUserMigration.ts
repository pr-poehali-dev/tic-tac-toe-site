/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SQL –º–∏–≥—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è SHA-256 (—ç–º—É–ª—è—Ü–∏—è)
const hashPassword = (password: string): string => {
  let hash = 0;
  for (let i = 0; i < password.length; i++) {
    const char = password.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }
  return Math.abs(hash).toString(16).padStart(32, '0');
};

// –°–æ–∑–¥–∞–Ω–∏–µ SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const createUserMigration = async (login: string, password: string): Promise<void> => {
  const hashedPassword = hashPassword(password);
  const userId = Date.now();
  const timestamp = new Date().toISOString();
  
  // –≠—Å–∫–µ–π–ø–∏–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const escapedLogin = login.replace(/'/g, "''");
  const escapedPassword = hashedPassword.replace(/'/g, "''");
  
  const migrationSQL = `-- –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${escapedLogin}
-- –°–æ–∑–¥–∞–Ω–æ: ${timestamp}

INSERT INTO users (id, login, password, created_at, updated_at) 
VALUES (${userId}, '${escapedLogin}', '${escapedPassword}', '${timestamp}', '${timestamp}')
ON CONFLICT (login) DO NOTHING;`;

  console.log('üóÉÔ∏è SQL –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  console.log(migrationSQL);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const existingMigrations = localStorage.getItem('user_migrations') || '';
  localStorage.setItem('user_migrations', existingMigrations + '\n\n' + migrationSQL);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Å SQL
  alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${login} –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\nSQL –º–∏–≥—Ä–∞—Ü–∏—è:\n${migrationSQL}`);
  
  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
};