/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */

// –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è (—ç–º—É–ª—è—Ü–∏—è SHA-256)
const hashPassword = (password: string): string => {
  let hash = 0;
  for (let i = 0; i < password.length; i++) {
    const char = password.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }
  return Math.abs(hash).toString(16).padStart(32, '0');
};

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const executeUserMigration = async (login: string, password: string): Promise<{ success: boolean; error?: string }> => {
  try {
    const hashedPassword = hashPassword(password);
    const userId = Date.now();
    const timestamp = new Date().toISOString();
    
    // –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationSQL = `INSERT INTO users (id, login, password, created_at, updated_at) VALUES (${userId}, '${login.replace(/'/g, "''")}', '${hashedPassword}', '${timestamp}', '${timestamp}') ON CONFLICT (login) DO NOTHING`;
    
    console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    console.log('SQL:', migrationSQL);
    
    // –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –∫ backend
    // –î–ª—è –¥–µ–º–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const completedMigrations = JSON.parse(localStorage.getItem('completed_user_migrations') || '[]');
    completedMigrations.push({
      login,
      sql: migrationSQL,
      timestamp,
      userId
    });
    localStorage.setItem('completed_user_migrations', JSON.stringify(completedMigrations));
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é SQL
    const shouldShowSQL = confirm(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${login}" –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n–ü–æ–∫–∞–∑–∞—Ç—å SQL –º–∏–≥—Ä–∞—Ü–∏—é?`);
    if (shouldShowSQL) {
      alert(`SQL –º–∏–≥—Ä–∞—Ü–∏—è:\n\n${migrationSQL}`);
    }
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
    };
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
export const getCompletedMigrations = (): Array<{login: string, sql: string, timestamp: string, userId: number}> => {
  return JSON.parse(localStorage.getItem('completed_user_migrations') || '[]');
};

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤ —Ñ–∞–π–ª
export const exportAllMigrations = (): void => {
  const migrations = getCompletedMigrations();
  
  if (migrations.length === 0) {
    alert('–ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    return;
  }
  
  const sqlContent = `-- –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
-- –°–æ–∑–¥–∞–Ω–æ: ${new Date().toISOString()}
-- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${migrations.length}

${migrations.map(m => `-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${m.login} (${m.timestamp})\n${m.sql};`).join('\n\n')}`;
  
  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const blob = new Blob([sqlContent], { type: 'text/sql' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `user_migrations_${new Date().toISOString().split('T')[0]}.sql`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  console.log('üì• –ú–∏–≥—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª');
};