/**
 * –†–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å PostgreSQL
 * –°–æ–∑–¥–∞–µ—Ç SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

interface RealUser {
  id: number;
  login: string;
  created_at: string;
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ
const hashPassword = (password: string): string => {
  // –≠–º—É–ª—è—Ü–∏—è SHA-256 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  let hash = 0;
  for (let i = 0; i < password.length; i++) {
    const char = password.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
  }
  return Math.abs(hash).toString(16).padStart(8, '0').repeat(4); // 32 —Å–∏–º–≤–æ–ª–∞
};

// –≠–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const createUserMigration = async (login: string, password: string): Promise<{ success: boolean; error?: string; user?: RealUser }> => {
  try {
    const hashedPassword = hashPassword(password);
    const userId = Date.now();
    const timestamp = new Date().toISOString();
    
    // –≠—Å–∫–µ–π–ø–∏–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è SQL
    const escapedLogin = login.replace(/'/g, "''");
    const escapedPassword = hashedPassword.replace(/'/g, "''");
    
    // –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationSQL = `-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${escapedLogin}
INSERT INTO users (id, login, password, created_at, updated_at) 
VALUES (${userId}, '${escapedLogin}', '${escapedPassword}', '${timestamp}', '${timestamp}')
ON CONFLICT (login) DO NOTHING;`;

    console.log('üóÉÔ∏è SQL –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log(migrationSQL);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
    const pendingUsers = getPendingUsers();
    const newUser: RealUser = {
      id: userId,
      login: login,
      created_at: timestamp
    };
    
    pendingUsers.push(newUser);
    localStorage.setItem('pending_database_users', JSON.stringify(pendingUsers));
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
    const userPasswords = getUserPasswords();
    userPasswords[login] = hashedPassword;
    localStorage.setItem('user_passwords', JSON.stringify(userPasswords));
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    
    return { success: true, user: newUser };
  } catch (error) {
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
    };
  }
};

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const getPendingUsers = (): RealUser[] => {
  const users = localStorage.getItem('pending_database_users');
  if (users) {
    return JSON.parse(users);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  const defaultUsers: RealUser[] = [
    {
      id: 1,
      login: 'test',
      created_at: new Date().toISOString()
    },
    {
      id: 2, 
      login: 'Laerman',
      created_at: new Date().toISOString()
    }
  ];
  
  localStorage.setItem('pending_database_users', JSON.stringify(defaultUsers));
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
  const passwords = {
    'test': hashPassword('test123'),
    'Laerman': '9464e6f6b6b7ad1e68b4c89b6d1e6ec7f5ad82fd36cdec5dc1b0b8b4f02d8949'
  };
  localStorage.setItem('user_passwords', JSON.stringify(passwords));
  
  return defaultUsers;
};

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const getUserPasswords = (): Record<string, string> => {
  const passwords = localStorage.getItem('user_passwords');
  return passwords ? JSON.parse(passwords) : {};
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userExists = (login: string): boolean => {
  const users = getPendingUsers();
  return users.some(user => user.login === login);
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUserInDatabase = async (login: string, password: string): Promise<{ success: boolean; error?: string; user?: RealUser }> => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!login || !password) {
    return { success: false, error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' };
  }
  
  if (login.length < 3) {
    return { success: false, error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞' };
  }
  
  if (password.length < 6) {
    return { success: false, error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (userExists(login)) {
    return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' };
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  return await createUserMigration(login, password);
};

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUserFromDatabase = (login: string, password: string): { success: boolean; error?: string; user?: RealUser } => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!login || !password) {
    return { success: false, error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' };
  }

  const users = getPendingUsers();
  const passwords = getUserPasswords();
  
  const user = users.find(u => u.login === login);
  if (!user) {
    return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' };
  }
  
  const hashedPassword = hashPassword(password);
  const storedPassword = passwords[login];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Å—Ç–∞—Ä—ã–µ —Ö–µ—à–∏)
  if (storedPassword !== hashedPassword && storedPassword !== password) {
    return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' };
  }

  return { success: true, user };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ
export const getDatabaseStats = (): { totalUsers: number; pendingUsers: number } => {
  const users = getPendingUsers();
  return {
    totalUsers: users.length,
    pendingUsers: users.length - 2 // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ SQL –¥–ª—è –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
export const getAllUserMigrationsSQL = (): string => {
  const users = getPendingUsers();
  const passwords = getUserPasswords();
  
  const migrations = users
    .filter(user => !['test', 'Laerman'].includes(user.login)) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö
    .map(user => {
      const password = passwords[user.login] || 'no_password';
      const escapedLogin = user.login.replace(/'/g, "''");
      const escapedPassword = password.replace(/'/g, "''");
      
      return `-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.login}
INSERT INTO users (id, login, password, created_at, updated_at) 
VALUES (${user.id}, '${escapedLogin}', '${escapedPassword}', '${user.created_at}', '${user.created_at}')
ON CONFLICT (login) DO NOTHING;`;
    });
  
  if (migrations.length === 0) {
    return '-- –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è';
  }
  
  return `-- –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
-- –°–æ–∑–¥–∞–Ω–æ: ${new Date().toISOString()}

${migrations.join('\n\n')}`;
};

// –≠–∫—Å–ø–æ—Ä—Ç SQL –º–∏–≥—Ä–∞—Ü–∏–π
export const exportUserMigrations = (): void => {
  const sql = getAllUserMigrationsSQL();
  console.log('üìÑ SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
  console.log(sql);
  
  // –°–æ–∑–¥–∞–µ–º blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const blob = new Blob([sql], { type: 'text/sql' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `user_migrations_${new Date().toISOString().split('T')[0]}.sql`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
export const initializeRealDatabaseAuth = (): void => {
  getPendingUsers(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
};