import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';

interface GameParticipant {
  user_id: number;
  login: string;
  position: number | null;
  joined_at: string;
  player_data: any;
}

interface GameBet {
  user_id: number;
  login: string;
  bet_amount: number;
  item_value: number;
  status: 'active' | 'won' | 'lost' | 'returned';
  placed_at: string;
  item_name: string;
  item_icon: string;
}

interface Game {
  id: string;
  game_type: string;
  status: 'active' | 'finished' | 'cancelled';
  winner_id: number | null;
  winner_login: string | null;
  total_pot_value: number;
  game_data: any;
  started_at: string;
  finished_at: string | null;
  participants: GameParticipant[];
  bets: GameBet[];
}

interface GameHistoryProps {
  userId?: number;
  limit?: number;
}

const GameHistory: React.FC<GameHistoryProps> = ({ userId, limit = 20 }) => {
  const [games, setGames] = useState<Game[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  const demoGames: Game[] = [
    {
      id: '1',
      game_type: 'poker',
      status: 'finished',
      winner_id: 1,
      winner_login: 'test_user',
      total_pot_value: 1500,
      game_data: { rounds: 3, final_hand: 'royal_flush', duration_minutes: 45 },
      started_at: '2024-09-15T14:30:00Z',
      finished_at: '2024-09-15T15:15:00Z',
      participants: [
        {
          user_id: 1,
          login: 'test_user',
          position: 1,
          joined_at: '2024-09-15T14:30:00Z',
          player_data: { cards: ['AS', 'KS'], final_bet: 500 }
        }
      ],
      bets: [
        {
          user_id: 1,
          login: 'test_user',
          bet_amount: 1,
          item_value: 500,
          status: 'won',
          placed_at: '2024-09-15T14:30:00Z',
          item_name: '–ú–µ—á –î—Ä–∞–∫–æ–Ω–æ–±–æ—Ä—Ü–∞',
          item_icon: '‚öîÔ∏è'
        }
      ]
    },
    {
      id: '2',
      game_type: 'blackjack',
      status: 'finished',
      winner_id: 1,
      winner_login: 'test_user',
      total_pot_value: 800,
      game_data: { dealer_score: 19, player_score: 21, cards_dealt: 12 },
      started_at: '2024-09-16T10:20:00Z',
      finished_at: '2024-09-16T10:35:00Z',
      participants: [
        {
          user_id: 1,
          login: 'test_user',
          position: 1,
          joined_at: '2024-09-16T10:20:00Z',
          player_data: { cards: ['AH', '10S'], score: 21 }
        }
      ],
      bets: [
        {
          user_id: 1,
          login: 'test_user',
          bet_amount: 1,
          item_value: 300,
          status: 'won',
          placed_at: '2024-09-16T10:20:00Z',
          item_name: '–©–∏—Ç –°—Ç—Ä–∞–∂–∞',
          item_icon: 'üõ°Ô∏è'
        }
      ]
    },
    {
      id: '3',
      game_type: 'roulette',
      status: 'active',
      winner_id: null,
      winner_login: null,
      total_pot_value: 600,
      game_data: { current_round: 1, pot_size: 600 },
      started_at: '2024-09-18T12:00:00Z',
      finished_at: null,
      participants: [
        {
          user_id: 1,
          login: 'test_user',
          position: null,
          joined_at: '2024-09-18T12:00:00Z',
          player_data: { bet_type: 'red', bet_amount: 600 }
        }
      ],
      bets: [
        {
          user_id: 1,
          login: 'test_user',
          bet_amount: 1,
          item_value: 600,
          status: 'active',
          placed_at: '2024-09-18T12:00:00Z',
          item_name: '–ó–µ–ª—å–µ –ó–¥–æ—Ä–æ–≤—å—è',
          item_icon: 'üß™'
        }
      ]
    }
  ];

  const loadGames = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      // const response = await fetch(`/api/game-history${userId ? `?user_id=${userId}` : ''}`)
      
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
      await new Promise(resolve => setTimeout(resolve, 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      
      let filteredGames = demoGames;
      if (userId) {
        filteredGames = demoGames.filter(game => 
          game.participants.some(p => p.user_id === userId)
        );
      }
      
      setGames(filteredGames.slice(0, limit));
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä');
      console.error('Error loading games:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadGames();
  }, [userId, limit]);

  const getGameTypeIcon = (gameType: string) => {
    switch (gameType) {
      case 'poker': return 'üé∞';
      case 'blackjack': return 'üÉè';
      case 'roulette': return 'üé≤';
      default: return 'üéÆ';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'finished': return 'secondary';
      case 'active': return 'default';
      case 'cancelled': return 'destructive';
      default: return 'secondary';
    }
  };

  const getBetStatusColor = (status: string) => {
    switch (status) {
      case 'won': return 'bg-green-100 text-green-800 border-green-200';
      case 'lost': return 'bg-red-100 text-red-800 border-red-200';
      case 'active': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'returned': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatGameType = (gameType: string) => {
    switch (gameType) {
      case 'poker': return '–ü–æ–∫–µ—Ä';
      case 'blackjack': return '–ë–ª—ç–∫–¥–∂–µ–∫';
      case 'roulette': return '–†—É–ª–µ—Ç–∫–∞';
      default: return gameType;
    }
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center justify-center py-8">
            <Icon name="Loader2" size={24} className="animate-spin text-gray-500" />
            <span className="ml-2 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center py-8">
            <Icon name="AlertCircle" size={24} className="text-red-500 mx-auto mb-2" />
            <p className="text-red-600 mb-4">{error}</p>
            <Button onClick={loadGames} variant="outline">
              <Icon name="RefreshCw" size={16} className="mr-2" />
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Icon name="History" size={20} />
            –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä
            {userId && <Badge variant="outline">–ú–æ–∏ –∏–≥—Ä—ã</Badge>}
          </CardTitle>
          <Button onClick={loadGames} variant="outline" size="sm">
            <Icon name="RefreshCw" size={16} className="mr-2" />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {games.length === 0 ? (
          <div className="text-center py-8">
            <Icon name="GamepadIcon" size={48} className="text-gray-300 mx-auto mb-4" />
            <p className="text-gray-500">–ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          </div>
        ) : (
          <div className="space-y-4">
            {games.map((game) => (
              <Card key={game.id} className="border-l-4 border-l-blue-500">
                <CardContent className="pt-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{getGameTypeIcon(game.game_type)}</span>
                      <div>
                        <h3 className="font-semibold text-lg">
                          {formatGameType(game.game_type)}
                        </h3>
                        <p className="text-sm text-gray-500">
                          {formatDate(game.started_at)}
                          {game.finished_at && ` - ${formatDate(game.finished_at)}`}
                        </p>
                      </div>
                    </div>
                    <Badge variant={getStatusColor(game.status)}>
                      {game.status === 'finished' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : 
                       game.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞—è' : '–û—Ç–º–µ–Ω–µ–Ω–∞'}
                    </Badge>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <p className="text-sm text-gray-600">–ë–∞–Ω–∫</p>
                      <p className="font-semibold text-yellow-600">
                        {game.total_pot_value} ü™ô
                      </p>
                    </div>
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <p className="text-sm text-gray-600">–£—á–∞—Å—Ç–Ω–∏–∫–∏</p>
                      <p className="font-semibold">{game.participants.length}</p>
                    </div>
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <p className="text-sm text-gray-600">–ü–æ–±–µ–¥–∏—Ç–µ–ª—å</p>
                      <p className="font-semibold">
                        {game.winner_login || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
                      </p>
                    </div>
                  </div>

                  {game.bets.length > 0 && (
                    <div>
                      <h4 className="font-medium mb-2">–°—Ç–∞–≤–∫–∏:</h4>
                      <div className="space-y-2">
                        {game.bets.map((bet, index) => (
                          <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                            <div className="flex items-center gap-2">
                              <span>{bet.item_icon}</span>
                              <span className="font-medium">{bet.item_name}</span>
                              <span className="text-sm text-gray-600">x{bet.bet_amount}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <span className="text-sm text-gray-600">{bet.item_value} ü™ô</span>
                              <Badge className={getBetStatusColor(bet.status)}>
                                {bet.status === 'won' ? '–í—ã–∏–≥—Ä–∞–ª' :
                                 bet.status === 'lost' ? '–ü—Ä–æ–∏–≥—Ä–∞–ª' :
                                 bet.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞—è' : '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞'}
                              </Badge>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default GameHistory;