import React from "react";
import { useGame } from "@/context/GameContext";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/context/AuthContext";
import { formatDistanceToNow } from "date-fns";
import { ru } from "date-fns/locale";
import { Copy, Bot, Flame } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import Board from "./Board";

const GameRoom: React.FC = () => {
  const { currentRoom, leaveRoom, makeMove, isSpectating } = useGame();
  const { user } = useAuth();
  const { toast } = useToast();
  
  if (!currentRoom) return null;
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const currentPlayer = currentRoom.players.find(p => p.username === user?.username);
  const opponentPlayer = currentRoom.players.find(p => p.username !== user?.username);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
  let gameStatus = "";
  
  if (currentRoom.status === "waiting") {
    gameStatus = "–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...";
  } else if (currentRoom.status === "playing") {
    if (currentRoom.winner) {
      gameStatus = `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${currentRoom.winner}`;
    } else if (currentRoom.board.every(cell => cell !== null)) {
      gameStatus = "–ù–∏—á—å—è!";
    } else {
      const isMyTurn = currentRoom.players.some(p => 
        p.username === user?.username && p.id === currentRoom.currentTurn
      );
      
      if (isSpectating) {
        const currentPlayerTurn = currentRoom.players.find(p => p.id === currentRoom.currentTurn);
        gameStatus = `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${currentPlayerTurn?.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} (${currentPlayerTurn?.symbol || "?"})`;
      } else {
        gameStatus = isMyTurn ? "–í–∞—à —Ö–æ–¥" : "–•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞";
      }
    }
  } else if (currentRoom.status === "finished") {
    if (currentRoom.winner) {
      if (isSpectating) {
        gameStatus = `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${currentRoom.winner}`;
      } else {
        const hasPlayerWon = currentRoom.winner === user?.username;
        gameStatus = hasPlayerWon
          ? "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üèÜ" 
          : `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò¢ (–ø–æ–±–µ–¥–∏–ª ${currentRoom.winner})`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–µ
        if (!hasPlayerWon && currentPlayer) {
          gameStatus += " –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–µ–ª–∞! üî•";
        }
      }
    } else {
      gameStatus = "–ù–∏—á—å—è!";
    }
  }

  const copyRoomCode = () => {
    navigator.clipboard.writeText(currentRoom.roomCode);
    toast({
      title: "–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω",
      description: "–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
    });
  };

  return (
    <div className="space-y-6">
      <Card className="overflow-hidden">
        <CardHeader className="pb-2">
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞</CardTitle>
              <CardDescription>
                –°–æ–∑–¥–∞–Ω–∞ {formatDistanceToNow(currentRoom.createdAt, { addSuffix: true, locale: ru })}
              </CardDescription>
            </div>
            <div className="flex items-center gap-2 bg-muted p-2 rounded">
              <span className="text-sm font-medium">–ö–æ–¥: {currentRoom.roomCode}</span>
              <Button variant="ghost" size="icon" onClick={copyRoomCode} className="h-6 w-6">
                <Copy className="h-3 w-3" />
              </Button>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="pb-4">
          {isSpectating && (
            <div className="bg-yellow-100 dark:bg-yellow-950 p-2 rounded mb-4 text-sm">
              <p className="font-medium">–†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)</p>
            </div>
          )}
          
          <div className="flex justify-between mb-4">
            <div>
              {currentRoom.players[0] && (
                <div className="flex items-center">
                  <p className="font-medium">{currentRoom.players[0].username} ({currentRoom.players[0].symbol})</p>
                  {currentRoom.players[0].isBot && (
                    <Bot className="ml-1 h-4 w-4 text-blue-500" title="–ë–æ—Ç" />
                  )}
                  {currentRoom.status === "playing" && (
                    <p className="text-sm text-muted-foreground ml-2">
                      {currentRoom.currentTurn === currentRoom.players[0].id ? "–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç" : ""}
                    </p>
                  )}
                </div>
              )}
            </div>
            
            <div className="text-right">
              {currentRoom.players[1] ? (
                <div className="flex items-center justify-end">
                  {currentRoom.status === "playing" && (
                    <p className="text-sm text-muted-foreground mr-2">
                      {currentRoom.currentTurn === currentRoom.players[1].id ? "–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç" : ""}
                    </p>
                  )}
                  <p className="font-medium">{currentRoom.players[1].username} ({currentRoom.players[1].symbol})</p>
                  {currentRoom.players[1].isBot && (
                    <Bot className="ml-1 h-4 w-4 text-blue-500" title="–ë–æ—Ç" />
                  )}
                </div>
              ) : (
                <div className="flex items-center justify-end">
                  <p className="text-sm text-muted-foreground">–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</p>
                  <span className="ml-2 text-xs bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 px-2 py-0.5 rounded-full">
                    –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
                  </span>
                </div>
              )}
            </div>
          </div>
          
          <div className="text-center mb-4">
            <p className="text-xl font-bold">{gameStatus}</p>
            {currentRoom.status === "finished" && currentRoom.winner !== user?.username && !isSpectating && (
              <div className="mt-2 flex items-center justify-center gap-2 text-red-500">
                <Flame className="h-5 w-5" />
                <p className="font-semibold">–í–∞—à –ø—Ä–µ–¥–º–µ—Ç —Å–≥–æ—Ä–µ–ª –∏ –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω!</p>
                <Flame className="h-5 w-5" />
              </div>
            )}
          </div>
          
          <div className="flex justify-center mb-4">
            <Board 
              squares={currentRoom.board} 
              onClick={(i) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
                if (isSpectating) return; // –í —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Ö–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è
                
                const canMove = 
                  currentRoom.status === "playing" && 
                  currentRoom.currentTurn === currentPlayer?.id &&
                  currentRoom.board[i] === null;
                
                if (canMove) {
                  makeMove(i);
                }
              }} 
            />
          </div>
          
          <div className="text-sm text-muted-foreground">
            <p>ID –∫–æ–º–Ω–∞—Ç—ã: {currentRoom.id}</p>
            <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {formatDistanceToNow(currentRoom.lastActivity, { addSuffix: true, locale: ru })}</p>
            {currentRoom.players.some(p => p.isBot) && (
              <p className="mt-2 text-blue-500 flex items-center">
                <Bot className="mr-1 h-4 w-4" /> 
                –í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –∏–≥—Ä–∞–µ—Ç –±–æ—Ç
              </p>
            )}
          </div>
          
          {/* –ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞–≤–∫–∞—Ö */}
          <div className="mt-4 p-3 bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-md">
            <h3 className="text-sm font-bold text-red-700 dark:text-red-400 flex items-center">
              <Flame className="h-4 w-4 mr-1" /> –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –Ω–∞ —Å—Ç–∞–≤–∫—É:
            </h3>
            <ul className="list-disc list-inside text-xs text-red-600 dark:text-red-400 mt-1">
              <li>–ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –≤—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —Å–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç</li>
              <li>–ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç —Å–≥–æ—Ä–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é</li>
              <li>–ü—Ä–∏ –Ω–∏—á—å–µ–π –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º</li>
              <li>–í—ã—Ö–æ–¥ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç</li>
            </ul>
          </div>
        </CardContent>
        
        <CardFooter>
          <Button onClick={leaveRoom} className="w-full" variant="outline">
            {isSpectating ? "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç" : (currentRoom.status === "finished" ? "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏" : "–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É")}
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

export default GameRoom;